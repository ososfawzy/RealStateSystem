package ma.oracle.apps.cx.realestate.property.views;

import oracle.jbo.Row;
import oracle.jbo.RowIterator;
import oracle.jbo.domain.Number;
import oracle.jbo.server.AttributeDefImpl;
import oracle.jbo.server.ViewRowImpl;
// ---------------------------------------------------------------------
// ---    File generated by Oracle ADF Business Components Design Time.
// ---    Mon May 07 12:16:36 EEST 2018
// ---    Custom code may be added to this class.
// ---    Warning: Do not modify method signatures of generated methods.
// ---------------------------------------------------------------------
public class MARealEstatePropertySubTypesVVORowImpl extends ViewRowImpl {
    /**
     * AttributesEnum: generated enum for identifying attributes and accessors. DO NOT MODIFY.
     */
    public enum AttributesEnum {
        TypeId {
            public Object get(MARealEstatePropertySubTypesVVORowImpl obj) {
                return obj.getTypeId();
            }

            public void put(MARealEstatePropertySubTypesVVORowImpl obj,
                            Object value) {
                obj.setTypeId((Number)value);
            }
        }
        ,
        ParentTypeId {
            public Object get(MARealEstatePropertySubTypesVVORowImpl obj) {
                return obj.getParentTypeId();
            }

            public void put(MARealEstatePropertySubTypesVVORowImpl obj,
                            Object value) {
                obj.setParentTypeId((Number)value);
            }
        }
        ,
        SubTypeName {
            public Object get(MARealEstatePropertySubTypesVVORowImpl obj) {
                return obj.getSubTypeName();
            }

            public void put(MARealEstatePropertySubTypesVVORowImpl obj,
                            Object value) {
                obj.setSubTypeName((String)value);
            }
        }
        ;
        private static AttributesEnum[] vals = null;
        private static final int firstIndex = 0;

        public abstract Object get(MARealEstatePropertySubTypesVVORowImpl object);

        public abstract void put(MARealEstatePropertySubTypesVVORowImpl object,
                                 Object value);

        public int index() {
            return MARealEstatePropertySubTypesVVORowImpl.AttributesEnum.firstIndex() + ordinal();
        }

        public static final int firstIndex() {
            return firstIndex;
        }

        public static int count() {
            return MARealEstatePropertySubTypesVVORowImpl.AttributesEnum.firstIndex() + MARealEstatePropertySubTypesVVORowImpl.AttributesEnum.staticValues().length;
        }

        public static final AttributesEnum[] staticValues() {
            if (vals == null) {
                vals = MARealEstatePropertySubTypesVVORowImpl.AttributesEnum.values();
            }
            return vals;
        }
    }


    public static final int TYPEID = AttributesEnum.TypeId.index();
    public static final int PARENTTYPEID = AttributesEnum.ParentTypeId.index();
    public static final int SUBTYPENAME = AttributesEnum.SubTypeName.index();

    /**
     * This is the default constructor (do not remove).
     */
    public MARealEstatePropertySubTypesVVORowImpl() {
    }

    /**
     * Gets the attribute value for the calculated attribute TypeId.
     * @return the TypeId
     */
    public Number getTypeId() {
        return (Number) getAttributeInternal(TYPEID);
    }

    /**
     * Sets <code>value</code> as the attribute value for the calculated attribute TypeId.
     * @param value value to set the  TypeId
     */
    public void setTypeId(Number value) {
        setAttributeInternal(TYPEID, value);
    }

    /**
     * Gets the attribute value for the calculated attribute ParentTypeId.
     * @return the ParentTypeId
     */
    public Number getParentTypeId() {
        return (Number) getAttributeInternal(PARENTTYPEID);
    }

    /**
     * Sets <code>value</code> as the attribute value for the calculated attribute ParentTypeId.
     * @param value value to set the  ParentTypeId
     */
    public void setParentTypeId(Number value) {
        setAttributeInternal(PARENTTYPEID, value);
    }


    /**
     * Gets the attribute value for the calculated attribute SubTypeName.
     * @return the SubTypeName
     */
    public String getSubTypeName() {
        return (String) getAttributeInternal(SUBTYPENAME);
    }

    /**
     * Sets <code>value</code> as the attribute value for the calculated attribute SubTypeName.
     * @param value value to set the  SubTypeName
     */
    public void setSubTypeName(String value) {
        setAttributeInternal(SUBTYPENAME, value);
    }


    /**
     * getAttrInvokeAccessor: generated method. Do not modify.
     * @param index the index identifying the attribute
     * @param attrDef the attribute

     * @return the attribute value
     * @throws Exception
     */
    protected Object getAttrInvokeAccessor(int index,
                                           AttributeDefImpl attrDef) throws Exception {
        if ((index >= AttributesEnum.firstIndex()) && (index < AttributesEnum.count())) {
            return AttributesEnum.staticValues()[index - AttributesEnum.firstIndex()].get(this);
        }
        return super.getAttrInvokeAccessor(index, attrDef);
    }

    /**
     * setAttrInvokeAccessor: generated method. Do not modify.
     * @param index the index identifying the attribute
     * @param value the value to assign to the attribute
     * @param attrDef the attribute

     * @throws Exception
     */
    protected void setAttrInvokeAccessor(int index, Object value,
                                         AttributeDefImpl attrDef) throws Exception {
        if ((index >= AttributesEnum.firstIndex()) && (index < AttributesEnum.count())) {
            AttributesEnum.staticValues()[index - AttributesEnum.firstIndex()].put(this, value);
            return;
        }
        super.setAttrInvokeAccessor(index, value, attrDef);
    }
}
