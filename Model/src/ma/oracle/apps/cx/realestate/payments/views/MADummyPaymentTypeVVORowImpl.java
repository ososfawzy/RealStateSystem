package ma.oracle.apps.cx.realestate.payments.views;

import oracle.jbo.RowSet;
import oracle.jbo.server.AttributeDefImpl;
import oracle.jbo.server.ViewRowImpl;
// ---------------------------------------------------------------------
// ---    File generated by Oracle ADF Business Components Design Time.
// ---    Thu Jan 03 17:12:16 EET 2019
// ---    Custom code may be added to this class.
// ---    Warning: Do not modify method signatures of generated methods.
// ---------------------------------------------------------------------
public class MADummyPaymentTypeVVORowImpl extends ViewRowImpl {
    /**
     * AttributesEnum: generated enum for identifying attributes and accessors. DO NOT MODIFY.
     */
    public enum AttributesEnum {
        PaymentType {
            public Object get(MADummyPaymentTypeVVORowImpl obj) {
                return obj.getPaymentType();
            }

            public void put(MADummyPaymentTypeVVORowImpl obj, Object value) {
                obj.setPaymentType((String) value);
            }
        },
        MAPaymentTypeVVO {
            public Object get(MADummyPaymentTypeVVORowImpl obj) {
                return obj.getMAPaymentTypeVVO();
            }

            public void put(MADummyPaymentTypeVVORowImpl obj, Object value) {
                obj.setAttributeInternal(index(), value);
            }
        };
        static AttributesEnum[] vals = null; ;
        private static final int firstIndex = 0;

        public abstract Object get(MADummyPaymentTypeVVORowImpl object);

        public abstract void put(MADummyPaymentTypeVVORowImpl object, Object value);

        public int index() {
            return AttributesEnum.firstIndex() + ordinal();
        }

        public static final int firstIndex() {
            return firstIndex;
        }

        public static int count() {
            return AttributesEnum.firstIndex() + AttributesEnum.staticValues().length;
        }

        public static final AttributesEnum[] staticValues() {
            if (vals == null) {
                vals = AttributesEnum.values();
            }
            return vals;
        }
    }

    public static final int PAYMENTTYPE = AttributesEnum.PaymentType.index();
    public static final int MAPAYMENTTYPEVVO = AttributesEnum.MAPaymentTypeVVO.index();

    /**
     * This is the default constructor (do not remove).
     */
    public MADummyPaymentTypeVVORowImpl() {
    }

    /**
     * Gets the attribute value for the calculated attribute PaymentType.
     * @return the PaymentType
     */
    public String getPaymentType() {
                return (String) getAttributeInternal(PAYMENTTYPE);
//        Map installmentScope = ADFContext.getCurrent().getSessionScope();
//        String installment = (String) installmentScope.get("InstallmentScope");
//        if (installment != null) {
//            if (installment.equals("Y")) {
//                installmentScope.remove("InstallmentScope");
//                return "Installment";
//            } else {
//                installmentScope.remove("InstallmentScope");
//                return "Rent";
//            }
//        }
//        return (String) getAttributeInternal(PAYMENTTYPE);
    }

    /**
     * Sets <code>value</code> as the attribute value for the calculated attribute PaymentType.
     * @param value value to set the  PaymentType
     */
    public void setPaymentType(String value) {
        setAttributeInternal(PAYMENTTYPE, value);
    }


    /**
     * Gets the view accessor <code>RowSet</code> MAPaymentTypeVVO.
     */
    public RowSet getMAPaymentTypeVVO() {
        return (RowSet) getAttributeInternal(MAPAYMENTTYPEVVO);
    }

    /**
     * getAttrInvokeAccessor: generated method. Do not modify.
     * @param index the index identifying the attribute
     * @param attrDef the attribute

     * @return the attribute value
     * @throws Exception
     */
    protected Object getAttrInvokeAccessor(int index, AttributeDefImpl attrDef) throws Exception {
        if ((index >= AttributesEnum.firstIndex()) && (index < AttributesEnum.count())) {
            return AttributesEnum.staticValues()[index - AttributesEnum.firstIndex()].get(this);
        }
        return super.getAttrInvokeAccessor(index, attrDef);
    }

    /**
     * setAttrInvokeAccessor: generated method. Do not modify.
     * @param index the index identifying the attribute
     * @param value the value to assign to the attribute
     * @param attrDef the attribute

     * @throws Exception
     */
    protected void setAttrInvokeAccessor(int index, Object value, AttributeDefImpl attrDef) throws Exception {
        if ((index >= AttributesEnum.firstIndex()) && (index < AttributesEnum.count())) {
            AttributesEnum.staticValues()[index - AttributesEnum.firstIndex()].put(this, value);
            return;
        }
        super.setAttrInvokeAccessor(index, value, attrDef);
    }
}

