package ma.oracle.apps.cx.realestate.property.views;

import oracle.jbo.Row;
import oracle.jbo.domain.Date;
import oracle.jbo.domain.Number;
import oracle.jbo.server.AttributeDefImpl;
import oracle.jbo.server.ViewRowImpl;
// ---------------------------------------------------------------------
// ---    File generated by Oracle ADF Business Components Design Time.
// ---    Tue May 22 12:44:10 EEST 2018
// ---    Custom code may be added to this class.
// ---    Warning: Do not modify method signatures of generated methods.
// ---------------------------------------------------------------------
public class MAGenericViewVVORowImpl extends ViewRowImpl {
    /**
     * AttributesEnum: generated enum for identifying attributes and accessors. DO NOT MODIFY.
     */
    public enum AttributesEnum {
        PropertyId {
            public Object get(MAGenericViewVVORowImpl obj) {
                return obj.getPropertyId();
            }

            public void put(MAGenericViewVVORowImpl obj, Object value) {
                obj.setPropertyId((Number)value);
            }
        }
        ,
        OwnerId {
            public Object get(MAGenericViewVVORowImpl obj) {
                return obj.getOwnerId();
            }

            public void put(MAGenericViewVVORowImpl obj, Object value) {
                obj.setOwnerId((Number)value);
            }
        }
        ,
        PropertySegment {
            public Object get(MAGenericViewVVORowImpl obj) {
                return obj.getPropertySegment();
            }

            public void put(MAGenericViewVVORowImpl obj, Object value) {
                obj.setPropertySegment((String)value);
            }
        }
        ,
        PropertyName {
            public Object get(MAGenericViewVVORowImpl obj) {
                return obj.getPropertyName();
            }

            public void put(MAGenericViewVVORowImpl obj, Object value) {
                obj.setPropertyName((String)value);
            }
        }
        ,
        Owner {
            public Object get(MAGenericViewVVORowImpl obj) {
                return obj.getOwner();
            }

            public void put(MAGenericViewVVORowImpl obj, Object value) {
                obj.setOwner((String)value);
            }
        }
        ,
        ParentTypeName {
            public Object get(MAGenericViewVVORowImpl obj) {
                return obj.getParentTypeName();
            }

            public void put(MAGenericViewVVORowImpl obj, Object value) {
                obj.setParentTypeName((String)value);
            }
        }
        ,
        PropertyLocation {
            public Object get(MAGenericViewVVORowImpl obj) {
                return obj.getPropertyLocation();
            }

            public void put(MAGenericViewVVORowImpl obj, Object value) {
                obj.setPropertyLocation((String)value);
            }
        }
        ,
        OccupationEq {
            public Object get(MAGenericViewVVORowImpl obj) {
                return obj.getOccupationEq();
            }

            public void put(MAGenericViewVVORowImpl obj, Object value) {
                obj.setOccupationEq((Number)value);
            }
        }
        ,
        DemandEq {
            public Object get(MAGenericViewVVORowImpl obj) {
                return obj.getDemandEq();
            }

            public void put(MAGenericViewVVORowImpl obj, Object value) {
                obj.setDemandEq((Number)value);
            }
        }
        ,
        ForecastEq {
            public Object get(MAGenericViewVVORowImpl obj) {
                return obj.getForecastEq();
            }

            public void put(MAGenericViewVVORowImpl obj, Object value) {
                obj.setForecastEq((Number)value);
            }
        }
        ,
        IdleEq {
            public Object get(MAGenericViewVVORowImpl obj) {
                return obj.getIdleEq();
            }

            public void put(MAGenericViewVVORowImpl obj, Object value) {
                obj.setIdleEq((Number)value);
            }
        }
        ,
        StartDate {
            public Object get(MAGenericViewVVORowImpl obj) {
                return obj.getStartDate();
            }

            public void put(MAGenericViewVVORowImpl obj, Object value) {
                obj.setStartDate((Date)value);
            }
        }
        ,
        EndDate {
            public Object get(MAGenericViewVVORowImpl obj) {
                return obj.getEndDate();
            }

            public void put(MAGenericViewVVORowImpl obj, Object value) {
                obj.setEndDate((String)value);
            }
        }
        ,
        ParentPropertyId {
            public Object get(MAGenericViewVVORowImpl obj) {
                return obj.getParentPropertyId();
            }

            public void put(MAGenericViewVVORowImpl obj, Object value) {
                obj.setParentPropertyId((Number)value);
            }
        }
        ,
        MARealEstateGenericPropertySearchVVO {
            public Object get(MAGenericViewVVORowImpl obj) {
                return obj.getMARealEstateGenericPropertySearchVVO();
            }

            public void put(MAGenericViewVVORowImpl obj, Object value) {
                obj.setAttributeInternal(index(), value);
            }
        }
        ,
        MAGenericOwnerVVO {
            public Object get(MAGenericViewVVORowImpl obj) {
                return obj.getMAGenericOwnerVVO();
            }

            public void put(MAGenericViewVVORowImpl obj, Object value) {
                obj.setAttributeInternal(index(), value);
            }
        }
        ;
        private static AttributesEnum[] vals = null;
        private static final int firstIndex = 0;

        public abstract Object get(MAGenericViewVVORowImpl object);

        public abstract void put(MAGenericViewVVORowImpl object, Object value);

        public int index() {
            return AttributesEnum.firstIndex() + ordinal();
        }

        public static final int firstIndex() {
            return firstIndex;
        }

        public static int count() {
            return AttributesEnum.firstIndex() + AttributesEnum.staticValues().length;
        }

        public static final AttributesEnum[] staticValues() {
            if (vals == null) {
                vals = AttributesEnum.values();
            }
            return vals;
        }
    }


    public static final int PROPERTYID = AttributesEnum.PropertyId.index();
    public static final int OWNERID = AttributesEnum.OwnerId.index();
    public static final int PROPERTYSEGMENT = AttributesEnum.PropertySegment.index();
    public static final int PROPERTYNAME = AttributesEnum.PropertyName.index();
    public static final int OWNER = AttributesEnum.Owner.index();
    public static final int PARENTTYPENAME = AttributesEnum.ParentTypeName.index();
    public static final int PROPERTYLOCATION = AttributesEnum.PropertyLocation.index();
    public static final int OCCUPATIONEQ = AttributesEnum.OccupationEq.index();
    public static final int DEMANDEQ = AttributesEnum.DemandEq.index();
    public static final int FORECASTEQ = AttributesEnum.ForecastEq.index();
    public static final int IDLEEQ = AttributesEnum.IdleEq.index();
    public static final int STARTDATE = AttributesEnum.StartDate.index();
    public static final int ENDDATE = AttributesEnum.EndDate.index();
    public static final int PARENTPROPERTYID = AttributesEnum.ParentPropertyId.index();
    public static final int MAREALESTATEGENERICPROPERTYSEARCHVVO = AttributesEnum.MARealEstateGenericPropertySearchVVO.index();
    public static final int MAGENERICOWNERVVO = AttributesEnum.MAGenericOwnerVVO.index();

    /**
     * This is the default constructor (do not remove).
     */
    public MAGenericViewVVORowImpl() {
    }

    /**
     * Gets the attribute value for the calculated attribute PropertyId.
     * @return the PropertyId
     */
    public Number getPropertyId() {
        return (Number) getAttributeInternal(PROPERTYID);
    }

    /**
     * Sets <code>value</code> as the attribute value for the calculated attribute PropertyId.
     * @param value value to set the  PropertyId
     */
    public void setPropertyId(Number value) {
        setAttributeInternal(PROPERTYID, value);
    }

    /**
     * Gets the attribute value for the calculated attribute OwnerId.
     * @return the OwnerId
     */
    public Number getOwnerId() {
        return (Number) getAttributeInternal(OWNERID);
    }

    /**
     * Sets <code>value</code> as the attribute value for the calculated attribute OwnerId.
     * @param value value to set the  OwnerId
     */
    public void setOwnerId(Number value) {
        setAttributeInternal(OWNERID, value);
    }

    /**
     * Gets the attribute value for the calculated attribute PropertySegment.
     * @return the PropertySegment
     */
    public String getPropertySegment() {
        return (String) getAttributeInternal(PROPERTYSEGMENT);
    }

    /**
     * Sets <code>value</code> as the attribute value for the calculated attribute PropertySegment.
     * @param value value to set the  PropertySegment
     */
    public void setPropertySegment(String value) {
        setAttributeInternal(PROPERTYSEGMENT, value);
    }

    /**
     * Gets the attribute value for the calculated attribute PropertyName.
     * @return the PropertyName
     */
    public String getPropertyName() {
        return (String) getAttributeInternal(PROPERTYNAME);
    }

    /**
     * Sets <code>value</code> as the attribute value for the calculated attribute PropertyName.
     * @param value value to set the  PropertyName
     */
    public void setPropertyName(String value) {
        setAttributeInternal(PROPERTYNAME, value);
    }

    /**
     * Gets the attribute value for the calculated attribute Owner.
     * @return the Owner
     */
    public String getOwner() {
        return (String) getAttributeInternal(OWNER);
    }

    /**
     * Sets <code>value</code> as the attribute value for the calculated attribute Owner.
     * @param value value to set the  Owner
     */
    public void setOwner(String value) {
        setAttributeInternal(OWNER, value);
    }


    /**
     * Gets the attribute value for the calculated attribute ParentTypeName.
     * @return the ParentTypeName
     */
    public String getParentTypeName() {
        return (String) getAttributeInternal(PARENTTYPENAME);
    }

    /**
     * Sets <code>value</code> as the attribute value for the calculated attribute ParentTypeName.
     * @param value value to set the  ParentTypeName
     */
    public void setParentTypeName(String value) {
        setAttributeInternal(PARENTTYPENAME, value);
    }

    /**
     * Gets the attribute value for the calculated attribute PropertyLocation.
     * @return the PropertyLocation
     */
    public String getPropertyLocation() {
        return (String) getAttributeInternal(PROPERTYLOCATION);
    }

    /**
     * Sets <code>value</code> as the attribute value for the calculated attribute PropertyLocation.
     * @param value value to set the  PropertyLocation
     */
    public void setPropertyLocation(String value) {
        setAttributeInternal(PROPERTYLOCATION, value);
    }


    /**
     * Gets the attribute value for the calculated attribute OccupationEq.
     * @return the OccupationEq
     */
    public Number getOccupationEq() {
        return (Number) getAttributeInternal(OCCUPATIONEQ);
    }

    /**
     * Sets <code>value</code> as the attribute value for the calculated attribute OccupationEq.
     * @param value value to set the  OccupationEq
     */
    public void setOccupationEq(Number value) {
        setAttributeInternal(OCCUPATIONEQ, value);
    }

    /**
     * Gets the attribute value for the calculated attribute DemandEq.
     * @return the DemandEq
     */
    public Number getDemandEq() {
        return (Number) getAttributeInternal(DEMANDEQ);
    }

    /**
     * Sets <code>value</code> as the attribute value for the calculated attribute DemandEq.
     * @param value value to set the  DemandEq
     */
    public void setDemandEq(Number value) {
        setAttributeInternal(DEMANDEQ, value);
    }

    /**
     * Gets the attribute value for the calculated attribute ForecastEq.
     * @return the ForecastEq
     */
    public Number getForecastEq() {
        return (Number) getAttributeInternal(FORECASTEQ);
    }

    /**
     * Sets <code>value</code> as the attribute value for the calculated attribute ForecastEq.
     * @param value value to set the  ForecastEq
     */
    public void setForecastEq(Number value) {
        setAttributeInternal(FORECASTEQ, value);
    }

    /**
     * Gets the attribute value for the calculated attribute IdleEq.
     * @return the IdleEq
     */
    public Number getIdleEq() {
        return (Number) getAttributeInternal(IDLEEQ);
    }

    /**
     * Sets <code>value</code> as the attribute value for the calculated attribute IdleEq.
     * @param value value to set the  IdleEq
     */
    public void setIdleEq(Number value) {
        setAttributeInternal(IDLEEQ, value);
    }

    /**
     * Gets the attribute value for the calculated attribute StartDate.
     * @return the StartDate
     */
    public Date getStartDate() {
        return (Date) getAttributeInternal(STARTDATE);
    }

    /**
     * Sets <code>value</code> as the attribute value for the calculated attribute StartDate.
     * @param value value to set the  StartDate
     */
    public void setStartDate(Date value) {
        setAttributeInternal(STARTDATE, value);
    }

    /**
     * Gets the attribute value for the calculated attribute EndDate.
     * @return the EndDate
     */
    public String getEndDate() {
        return (String) getAttributeInternal(ENDDATE);
    }

    /**
     * Sets <code>value</code> as the attribute value for the calculated attribute EndDate.
     * @param value value to set the  EndDate
     */
    public void setEndDate(String value) {
        setAttributeInternal(ENDDATE, value);
    }

    /**
     * Gets the attribute value for the calculated attribute ParentPropertyId.
     * @return the ParentPropertyId
     */
    public Number getParentPropertyId() {
        return (Number) getAttributeInternal(PARENTPROPERTYID);
    }

    /**
     * Sets <code>value</code> as the attribute value for the calculated attribute ParentPropertyId.
     * @param value value to set the  ParentPropertyId
     */
    public void setParentPropertyId(Number value) {
        setAttributeInternal(PARENTPROPERTYID, value);
    }

    /**
     * Gets the associated <code>Row</code> using master-detail link MARealEstateGenericPropertySearchVVO.
     */
    public Row getMARealEstateGenericPropertySearchVVO() {
        return (Row)getAttributeInternal(MAREALESTATEGENERICPROPERTYSEARCHVVO);
    }

    /**
     * Sets the master-detail link MARealEstateGenericPropertySearchVVO between this object and <code>value</code>.
     */
    public void setMARealEstateGenericPropertySearchVVO(Row value) {
        setAttributeInternal(MAREALESTATEGENERICPROPERTYSEARCHVVO, value);
    }

    /**
     * Gets the associated <code>Row</code> using master-detail link MAGenericOwnerVVO.
     */
    public Row getMAGenericOwnerVVO() {
        return (Row)getAttributeInternal(MAGENERICOWNERVVO);
    }

    /**
     * Sets the master-detail link MAGenericOwnerVVO between this object and <code>value</code>.
     */
    public void setMAGenericOwnerVVO(Row value) {
        setAttributeInternal(MAGENERICOWNERVVO, value);
    }

    /**
     * getAttrInvokeAccessor: generated method. Do not modify.
     * @param index the index identifying the attribute
     * @param attrDef the attribute

     * @return the attribute value
     * @throws Exception
     */
    protected Object getAttrInvokeAccessor(int index,
                                           AttributeDefImpl attrDef) throws Exception {
        if ((index >= AttributesEnum.firstIndex()) && (index < AttributesEnum.count())) {
            return AttributesEnum.staticValues()[index - AttributesEnum.firstIndex()].get(this);
        }
        return super.getAttrInvokeAccessor(index, attrDef);
    }

    /**
     * setAttrInvokeAccessor: generated method. Do not modify.
     * @param index the index identifying the attribute
     * @param value the value to assign to the attribute
     * @param attrDef the attribute

     * @throws Exception
     */
    protected void setAttrInvokeAccessor(int index, Object value,
                                         AttributeDefImpl attrDef) throws Exception {
        if ((index >= AttributesEnum.firstIndex()) && (index < AttributesEnum.count())) {
            AttributesEnum.staticValues()[index - AttributesEnum.firstIndex()].put(this, value);
            return;
        }
        super.setAttrInvokeAccessor(index, value, attrDef);
    }
}
